schema {
  query: Query
  mutation: Mutation
}

"""Groups fields and operations into named groups."""
directive @doc(
  """Name of the grouping category"""
  category: String!
) on ENUM | FIELD | FIELD_DEFINITION | INPUT_OBJECT | OBJECT

type Query {
  """
  Return the currently authenticated user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  viewer: User @doc(category: "Users")

  """One specific organization invite."""
  organizationInviteDetails(
    """An invite link for an organization."""
    inviteLink: String!
  ): InviteDetails @doc(category: "Organizations")

  """
  The current organization invite link.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteLink: OrganizationInviteLink @doc(category: "Organizations")
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

"""Represents user data."""
type User implements Node @doc(category: "Users") {
  """The ID of the user."""
  id: ID!

  """The email address of the user."""
  email: String!

  """The given name of the user."""
  firstName: String!

  """The family name of the user."""
  lastName: String!

  """Determine if the user is a staff admin."""
  isStaff: Boolean!

  """Determine if the user is active."""
  isActive: Boolean!

  """
  The current organization of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organization: AuthOrganization

  """
  The current project of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  project: Project

  """
  Organizations the user is part of.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organizations(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): OrganizationCountableConnection

  """
  Projects the user has access to.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  projects(
    """By which field should the pagination order by."""
    orderBy: ProjectSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): ProjectCountableConnection
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""Represents an organization."""
type AuthOrganization implements Node @doc(category: "Organizations") {
  """The ID of the organization."""
  id: ID!

  """Slug of the organization."""
  slug: String!

  """
  Name of the organization.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  name: String!

  """
  Member count
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  memberCount: Int!
}

"""Represents a project."""
type Project implements Node @doc(category: "Projects") {
  """The ID of the project."""
  id: ID!

  """Name of the project."""
  name: String!

  """Slug of the project."""
  slug: String!

  """Whether the project is private or not."""
  accessControl: Boolean

  """The data required for the onboarding process"""
  hasCompletedOnboardingFor: JSONString

  """The timezone of the project."""
  timezone: String!

  """Organization the project belongs to."""
  organization: AuthOrganization!
}

scalar JSONString

type OrganizationCountableConnection @doc(category: "Organizations") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrganizationCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type OrganizationCountableEdge @doc(category: "Organizations") {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an organization."""
type Organization implements Node @doc(category: "Organizations") {
  """The ID of the organization."""
  id: ID!

  """Slug of the organization."""
  slug: String!

  """
  Name of the organization.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  name: String!

  """
  Member count
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  memberCount: Int!

  """
  Users associated with the organization.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  members(
    """By which field should the pagination order by."""
    orderBy: UserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): UserCountableConnection

  """
  Projects associated with the organization.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  projects(
    """By which field should the pagination order by."""
    orderBy: UserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): ProjectCountableConnection
}

type UserCountableConnection @doc(category: "Users") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type UserCountableEdge @doc(category: "Users") {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserSortingInput @doc(category: "Users") {
  """Specifies the direction in which to sort users."""
  direction: OrderDirection!

  """Sort users by the selected field."""
  field: UserSortField!
}

enum OrderDirection {
  """Specifies an ascending sort order."""
  ASC

  """Specifies a descending sort order."""
  DESC
}

enum UserSortField @doc(category: "Users") {
  """Sort users by first name."""
  FIRST_NAME

  """Sort users by last name."""
  LAST_NAME

  """Sort users by email."""
  EMAIL

  """Sort users by created at."""
  CREATED_AT
}

type ProjectCountableConnection @doc(category: "Projects") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProjectCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProjectCountableEdge @doc(category: "Projects") {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

input ProjectSortingInput @doc(category: "Projects") {
  """Specifies the direction in which to sort projects."""
  direction: OrderDirection!

  """Sort projects by the selected field."""
  field: ProjectSortField!
}

enum ProjectSortField @doc(category: "Projects") {
  """Sort projects by name."""
  NAME

  """Sort projects by created at."""
  CREATED_AT

  """Sort projects by updated at."""
  UPDATED_AT
}

union InviteDetails = OrganizationInviteDetails | OrganizationInviteLinkDetails

"""The organization invite that was created or updated."""
type OrganizationInviteDetails implements Node @doc(category: "Organizations") {
  """The unique identifier of the invite."""
  id: ID!

  """The invitees email address."""
  email: String!

  """First name of the invite."""
  firstName: String

  """The user role that the invitee will receive upon accepting the invite."""
  role: RoleLevel!

  """The time at which the invite was created."""
  createdAt: DateTime!

  """The last time at which the invite was updated."""
  updatedAt: DateTime!

  """If the invite has expired."""
  expired: Boolean!

  """The name/email of the inviter."""
  inviter: String!

  """The ID of the organization the invite is for."""
  organizationId: ID!

  """The name of the organization the invite is for."""
  organizationName: String!

  """The logo of the organization the invite is for."""
  organizationLogo: String
}

enum RoleLevel {
  MEMBER
  ADMIN
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""The organization invite that was created or updated."""
type OrganizationInviteLinkDetails implements Node @doc(category: "Organizations") {
  """The ID of the object."""
  id: ID!

  """The ID of the organization the invite is for."""
  organizationId: ID!

  """The name of the organization the invite is for."""
  organizationName: String!

  """The logo of the organization the invite is for."""
  organizationLogo: String
}

"""The organization invite link."""
type OrganizationInviteLink implements Node @doc(category: "Organizations") {
  """The ID of the object."""
  id: ID!

  """
  The link of the organization the invite is for.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  inviteLink: String!
}

type Mutation {
  """Authenticates a user account via email and authentication token."""
  emailTokenUserAuth(
    """The email which to login via the magic login code."""
    email: String!

    """An optional invite link for an organization."""
    inviteLink: String

    """The magic login code."""
    token: String!
  ): EmailTokenUserAuth @doc(category: "Authentication")

  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAuthChallenge(
    """The email for which to generate the magic login code."""
    email: String!

    """An optional invite link for an organization."""
    inviteLink: String
  ): EmailUserAuthChallenge @doc(category: "Authentication")

  """Finds or creates a new user account from google auth credentials."""
  googleUserAuth(
    """Code gotten from google auth consent screen."""
    code: String!

    """An optional invite link for an organization."""
    inviteLink: String
  ): GoogleUserAuth @doc(category: "Authentication")

  """
  Deactivate all JWT tokens of the currently authenticated user. 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  logout: Logout @doc(category: "Authentication")

  """
  Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `refreshToken`. `csrfToken` is required when `refreshToken` is provided as a cookie.
  """
  tokenRefresh(
    """
    CSRF token required to refresh token. This argument is required when `refreshToken` is provided as a cookie.
    """
    csrfToken: String

    """Refresh token."""
    refreshToken: String
  ): RefreshToken @doc(category: "Authentication")

  """Creates a new project"""
  projectCreate(
    """The project object to create."""
    input: ProjectCreateInput!
  ): ProjectCreate @doc(category: "Projects")

  """Updates a project."""
  projectUpdate(
    """A partial object to update the project with."""
    input: ProjectUpdateInput!
  ): ProjectUpdate @doc(category: "Projects")

  """
  Creates new organization. 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organizationCreate(
    """Organization details for the new organization."""
    input: OrganizationCreateInput!

    """Onboarding survey."""
    survey: OnboardingCustomerSurvey
  ): OrganizationCreate @doc(category: "Organizations")

  """
  Creates a new organization invite. 
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteCreate(
    """The organization invite object to create."""
    input: OrganizationInviteCreateInput!
  ): OrganizationInviteCreate @doc(category: "Organizations")

  """
  Reset the current organization invite link.. 
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteLinkReset: OrganizationInviteLinkReset @doc(category: "Organizations")

  """
  Joins an organization 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organizationJoin(
    """Organization details for the new organization."""
    input: OrganizationJoinInput!
  ): OrganizationJoin @doc(category: "Organizations")
}

"""Authenticates a user account via email and authentication token."""
type EmailTokenUserAuth @doc(category: "Authentication") {
  """Access token to authenticate the user."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user that has access to the the resources of an organization."""
  user: AuthUser
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""Represents an authenticated user data."""
type AuthUser implements Node @doc(category: "Users") {
  """The ID of the user."""
  id: ID!

  """The email address of the user."""
  email: String!

  """The given name of the user."""
  firstName: String!

  """The family name of the user."""
  lastName: String!

  """Determine if the user is a staff admin."""
  isStaff: Boolean!

  """Determine if the user is active."""
  isActive: Boolean!

  """
  The current organization of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organization: AuthOrganization

  """
  The current project of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  project: Project
}

"""Represents errors in user mutations."""
type UserError @doc(category: "Users") {
  """
  Name of a field that caused the error. A value of `null` ndicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: UserErrorCode!
}

"""An enumeration."""
enum UserErrorCode @doc(category: "Users") {
  GRAPHQL_ERROR
  INACTIVE
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  INVALID_MAGIC_CODE
  MAGIC_CODE_EXPIRED
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
}

"""
Finds or creates a new user account by email and sends an email with token.
"""
type EmailUserAuthChallenge @doc(category: "Authentication") {
  """Whether the operation was successful."""
  success: Boolean

  """Supported challenge for this user."""
  authType: String
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""Finds or creates a new user account from google auth credentials."""
type GoogleUserAuth @doc(category: "Authentication") {
  """Whether the operation was successful."""
  success: Boolean

  """Access token to authenticate the user."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user that has access to the the resources of an organization."""
  user: AuthUser
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""
Deactivate all JWT tokens of the currently authenticated user. 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type Logout @doc(category: "Authentication") {
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""
Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `refreshToken`. `csrfToken` is required when `refreshToken` is provided as a cookie.
"""
type RefreshToken @doc(category: "Authentication") {
  """Acess token to authenticate the user."""
  token: String
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""Creates a new project"""
type ProjectCreate @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  project: Project
}

"""Represents errors in project mutations."""
type ProjectError @doc(category: "Projects") {
  """
  Name of a field that caused the error. A value of `null` ndicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProjectErrorCode!
}

"""An enumeration."""
enum ProjectErrorCode @doc(category: "Projects") {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input ProjectCreateInput @doc(category: "Projects") {
  """The name of the project."""
  name: String!

  """The timezone of the project."""
  timezone: String

  """Whether the project is private or not."""
  private: Boolean

  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: UUID
}

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""Updates a project."""
type ProjectUpdate @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  project: Project
}

input ProjectUpdateInput @doc(category: "Projects") {
  """The name of the project."""
  name: String

  """The timezone of the project."""
  timezone: String

  """Whether the project is private or not."""
  private: Boolean

  """The icon of the project."""
  icon: String

  """The data required for the onboarding process."""
  hasCompletedOnboardingFor: JSONString
}

"""
Creates new organization. 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type OrganizationCreate @doc(category: "Organizations") {
  """
  An organization. Organizations are root-level objects that contain users and projects.
  """
  organization: AuthOrganization

  """A user that has access to the the resources of an organization."""
  user: AuthUser
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
}

"""Represents errors in organization mutations."""
type OrganizationError @doc(category: "Organizations") {
  """
  Name of a field that caused the error. A value of `null` ndicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrganizationErrorCode!
}

"""An enumeration."""
enum OrganizationErrorCode @doc(category: "Organizations") {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input OrganizationCreateInput @doc(category: "Organizations") {
  """The name of the organization."""
  name: String!

  """The slug of the organization."""
  slug: String!

  """The timezone of the organization, passed in by client."""
  timezone: String!
}

input OnboardingCustomerSurvey @doc(category: "Organizations") {
  """Your role in your company"""
  companyRole: String

  """Size of your company"""
  companySize: String
}

"""
Creates a new organization invite. 

Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
"""
type OrganizationInviteCreate @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organizationInvite: OrganizationInvite
}

"""The organization invite that was created or updated."""
type OrganizationInvite implements Node @doc(category: "Organizations") {
  """The unique identifier of the invite."""
  id: ID!

  """The invitees email address."""
  email: String!

  """First name of the invite."""
  firstName: String

  """The user role that the invitee will receive upon accepting the invite."""
  role: RoleLevel!

  """The time at which the invite was created."""
  createdAt: DateTime!

  """The last time at which the invite was updated."""
  updatedAt: DateTime!

  """If the invite has expired."""
  expired: Boolean!

  """
  The user who created the invitation.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  inviter: User!

  """
  The current project of the user.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organization: Organization!
}

input OrganizationInviteCreateInput @doc(category: "Organizations") {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: UUID

  """The email of the invitee."""
  email: String!

  """The message to send to the invitee."""
  message: String

  """What member role the invite should grant."""
  role: RoleLevel = 1
}

"""
Reset the current organization invite link.. 

Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
"""
type OrganizationInviteLinkReset @doc(category: "Organizations") {
  """The current organization invite link."""
  inviteLink: String

  """Whether the operation was successful."""
  success: Boolean
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
}

"""
Joins an organization 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type OrganizationJoin @doc(category: "Organizations") {
  """A user that has access to the the resources of an organization."""
  user: AuthUser!
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
}

input OrganizationJoinInput @doc(category: "Organizations") {
  """An invite link for an organization."""
  inviteLink: String!
}

"""_Any value scalar as defined by Federation spec."""
scalar _Any

"""_Entity union as defined by Federation spec."""
union _Entity = AuthUser | User

"""_Service manifest as defined by Federation spec."""
type _Service {
  sdl: String
}
